/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/xO2HibBPmEp
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Syne } from 'next/font/google'

syne({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { FaSatelliteDish, FaFilter, FaDownload, FaUpload, FaExclamationTriangle, FaUser } from 'react-icons/fa'
import StarlinkLogo from "@/components/StarlinkLogo"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { ComposableMap, Geographies, Geography, Marker } from "react-simple-maps"
import { scaleLinear } from "d3-scale"
import worldCountries from "@/app/assets/world_countries.json"

export function StarlinkHomepage() {
  const [showModal, setShowModal] = useState(false)
  const [formData, setFormData] = useState({
    downloadSpeed: '',
    uploadSpeed: '',
    equipment: '',
    name: ''
  })
  const [formError, setFormError] = useState('')
  const [speedData, setSpeedData] = useState([])
  const [hasSubmitted, setHasSubmitted] = useState(false) // New state for submission status

  useEffect(() => {
    // Check if user has already submitted
    const submitted = sessionStorage.getItem('hasSubmitted') === 'true'
    setHasSubmitted(submitted)

    // Fetch data from the backend on component mount
    const fetchData = async () => {
      try {
        const response = await fetch('/api/speedData')
        const data = await response.json()
        setSpeedData(data)
      } catch (error) {
        console.error('Error fetching speed data:', error)
      }
    }
    fetchData()
  }, [])

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prevData => ({ ...prevData, [name]: value }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (validateForm()) {
      // Get user's current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords
            await submitData(longitude, latitude)
            setHasSubmitted(true) // Update submission status
            sessionStorage.setItem('hasSubmitted', 'true') // Store submission flag
          },
          async () => {
            // If user denies geolocation, use default
            await submitData(0, 0)
            setHasSubmitted(true)
            sessionStorage.setItem('hasSubmitted', 'true')
          }
        )
      } else {
        // Geolocation not supported, use default
        await submitData(0, 0)
        setHasSubmitted(true)
        sessionStorage.setItem('hasSubmitted', 'true')
      }
    }
  }

  const submitData = async (latitude, longitude) => {
    const dataToSubmit = {
      latitude,
      longitude,
      downloadSpeed: formData.downloadSpeed,
      uploadSpeed: formData.uploadSpeed,
      equipment: formData.equipment,
      name: formData.name || 'Elongated Muskrat'
    }

    try {
      const response = await fetch('/api/speedData', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSubmit),
      })
      if (response.ok) {
        const newData = await response.json()
        setSpeedData(prevData => [...prevData, newData])
        setShowModal(false)
        setFormData({
          downloadSpeed: '',
          uploadSpeed: '',
          equipment: '',
          name: ''
        })
      } else {
        const errorData = await response.json()
        setFormError(errorData.message || 'Failed to submit data.')
      }
    } catch (error) {
      setFormError('An error occurred while submitting the data.')
    }
  }

  const validateForm = () => {
    const { downloadSpeed, uploadSpeed, equipment } = formData

    if (!downloadSpeed || !uploadSpeed || !equipment) {
      setFormError('Download Speed, Upload Speed, and Equipment are required.')
      return false
    }

    if (isNaN(downloadSpeed) || downloadSpeed < 1 || downloadSpeed > 1000) {
      setFormError('Download speed must be between 1 and 1000 Mbps.')
      return false
    }

    if (isNaN(uploadSpeed) || uploadSpeed < 1 || uploadSpeed > 300) {
      setFormError('Upload speed must be between 1 and 300 Mbps.')
      return false
    }

    setFormError('')
    return true
  }

  const colorScale = scaleLinear()
    .domain([200, 300])
    .range(["#ff4e50", "#00c853"])

  return (
    <div className="flex min-h-screen flex-col bg-gray-100 text-gray-900 w-full items-center">
      <header className="sticky top-0 z-10 border-b bg-white shadow-sm w-full flex justify-center items-center py-4">
        <div className="container flex h-16 items-center justify-between px-4 md:px-6">
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <StarlinkLogo className="h-8 w-auto" />
            <span className="font-bold text-xl">Starlink Speeds</span>
          </Link>
          {!hasSubmitted ? ( // Conditionally render Submit button
            <Button 
              onClick={() => setShowModal(true)} 
              className="bg-blue-600 hover:bg-blue-700 text-white ml-4"
            >
              Submit Speed Test 
            </Button>
          ) : (
            <span className="text-gray-500">You have already submitted!</span>
          )}
        </div>
      </header>
      <main className="flex-1 w-full flex flex-col items-center">
        <section className="w-full py-12 md:py-24 lg:py-32 bg-gradient-to-r from-blue-600 to-blue-800 flex justify-center">
          <div className="container px-4 md:px-6 text-center">
            <div className="flex flex-col items-center justify-center space-y-4 text-center text-white">
              <div className="space-y-2">
                <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl md:text-6xl">Starlink Speed Reports</h1>
                <p className="max-w-[700px] text-lg md:text-xl/relaxed">
                  Check out the latest Starlink internet speed reports from users across the country.
                </p>
              </div>
            </div>
            {/* <div className="flex justify-center mt-8">
              <Card className="bg-white/10 border-white/20 text-white">
                <CardContent className="flex items-center space-x-4 p-4">
                  <div className="flex flex-col items-center">
                    <span className="text-3xl font-bold">{1000}+</span>
                    <Badge variant="secondary" className="mt-1">Reports</Badge>
                  </div>
                  <div className="text-2xl font-light">from</div>
                  <div className="flex flex-col items-center">
                    <span className="text-3xl font-bold">{100}+</span>
                    <Badge variant="secondary" className="mt-1">Countries</Badge>
                  </div>
                </CardContent>
              </Card>
            </div> */}
          </div>
          
        </section>
        <section className="container flex-1 px-4 py-8 md:px-6 md:py-12 flex justify-center">
          <div className="rounded-lg border bg-white p-6 shadow-sm max-w-4xl w-full">
            <div className="mb-6 flex flex-col items-center justify-center">
              <h2 className="text-2xl font-bold text-gray-900 mb-4 flex items-center">
                Global Starlink Speed Map
              </h2>
            </div>
            <div className="w-full h-auto mb-8 flex justify-center items-center mx-auto border-2 border-grey rounded-lg">
              <ComposableMap projection="geoMercator" projectionConfig={{ scale: 100 }}>
                <Geographies geography={worldCountries}>
                  {({ geographies }) =>
                    geographies.map((geo) => (
                      <Geography
                        key={geo.rsmKey}
                        geography={geo}
                        fill="#EAEAEC"
                        stroke="#D6D6DA"
                      />
                    ))
                  }
                </Geographies>
                {speedData.map((data, index) => (
                  <Marker key={index} coordinates={data.location}>
                    <circle r={5} fill={colorScale(data.downloadSpeed)} stroke="#fff" strokeWidth={2} />
                    <title>{`${data.name}: ${data.downloadSpeed} Mbps`}</title>
                  </Marker>
                ))}
              </ComposableMap>
            </div>
            <div className="flex justify-center items-center mb-4">
              <div className="flex items-center">
                <div className="w-4 h-4 bg-[#ff4e50] mr-2"></div>
                <span className="text-sm">Slower</span>
              </div>
              <div className="w-32 h-2 bg-gradient-to-r from-[#ff4e50] to-[#00c853] mx-4"></div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-[#00c853] mr-2"></div>
                <span className="text-sm">Faster</span>
              </div>
            </div>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="text-gray-700 text-center">Name</TableHead>
                  <TableHead className="text-gray-700 text-center">Download</TableHead>
                  <TableHead className="text-gray-700 text-center">Upload</TableHead>
                  <TableHead className="text-gray-700 text-center">Equipment</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {speedData.map((data, index) => (
                  <TableRow key={index}>
                    <TableCell className="text-center">{data.name}</TableCell>
                    <TableCell className="text-center">{data.downloadSpeed} Mbps</TableCell>
                    <TableCell className="text-center">{data.uploadSpeed} Mbps</TableCell>
                    <TableCell className="text-center">{data.equipment}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </section>
        <section className="container flex-1 px-4 py-8 md:px-6 md:py-12 flex justify-center">
          <div className="flex flex-col items-center justify-center space-y-4 text-center"> 
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Submit Your Speed Test</h2>
            <p className="text-sm text-gray-600">Submit your speed test results to help others see how Starlink performs in your area.</p>
            {!hasSubmitted ? ( // Conditionally render Submit button
              <Button onClick={() => setShowModal(true)} className="bg-blue-600 hover:bg-blue-700 text-white rounded-md px-4 py-2">Submit Speed Test</Button>
            ) : (
              <span className="text-gray-500">You have already submitted!</span>
            )}
            <div className="flex justify-center gap-4 mt-2">
            <span className="text-sm text-muted-foreground">
                    Not affiliated with Starlink or SpaceX.
                </span>
            </div>
          </div>
        </section>
      </main>
      <Dialog open={showModal} onOpenChange={setShowModal}>
        <DialogContent className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-gray-900 text-center">Submit Speed Test <span className="text-sm text-gray-500">(It&apos;s free)</span></DialogTitle>
          </DialogHeader>
          {formError && (
            <Alert variant="destructive">
              <FaExclamationTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{formError}</AlertDescription>
            </Alert>
          )}
          <form onSubmit={handleSubmit} className="grid gap-6">
            <div className="relative">
              <FaDownload className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Input
                type="number"
                name="downloadSpeed"
                value={formData.downloadSpeed}
                onChange={handleInputChange}
                placeholder="Enter your download speed (Mbps)"
                className="pl-10 border-gray-300 text-black rounded-md shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              />
            </div>
            <div className="relative">
              <FaUpload className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Input
                type="number"
                name="uploadSpeed"
                value={formData.uploadSpeed}
                onChange={handleInputChange}
                placeholder="Enter your upload speed (Mbps)"
                className="pl-10 border-gray-300 text-black rounded-md shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              />
            </div>
            <div className="relative">
              <FaSatelliteDish className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Select name="equipment" value={formData.equipment} onValueChange={(value) => setFormData(prev => ({ ...prev, equipment: value }))}>
                <SelectTrigger className="w-full pl-10 border-gray-300 text-black rounded-md shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                  <SelectValue placeholder="Select Equipment" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Starlink Residential">Starlink Residential</SelectItem>
                  <SelectItem value="Starlink Mini">Starlink Mini</SelectItem>
                  <SelectItem value="Starlink Base">Starlink Base</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="relative">
              <FaUser className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Your Name (Optional)"
                className="pl-10 border-gray-300 text-black rounded-md shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              />
            </div>
            <div className="flex justify-center gap-4 mt-2">
              <Button type="button" variant="outline" onClick={() => setShowModal(false)} className="text-gray-700 border-gray-300 hover:bg-gray-100 rounded-md px-4 py-2">Cancel</Button>
              <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white rounded-md px-4 py-2">Submit</Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
